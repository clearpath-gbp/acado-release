/*
 * ACADO OCP solver wrapper.
 */

#include <string.h>
#include "@MODULE_NAME@_solver_sfunction.h"
#include "@MODULE_NAME@_auxiliary_functions.h"

/* Make instances of ACADO structures. */
ACADOvariables acadoVariables;
ACADOworkspace acadoWorkspace;

/* Initialized indicator. */
static unsigned initialized = 0;

void @MODULE_NAME@_step(@MODULE_NAME@input* inData, @MODULE_NAME@output* outData)
{
	timer tmr;
	
	/* Start measuring time. */
	tic( &tmr );
	
	/* Copy all outside world data here. */	
	memcpy(&acadoVariables, &(inData->data), sizeof( ACADOvariables ));
	
	/* Call solver */
	switch ( inData->control )
	{
		case 0:
			/* Simple operational mode. Run one RTI with optional shifting. */
			
			if ( !initialized )
			{				
				if (inData->initialization == 1)
				{
					initializeNodesByForwardSimulation();
				}
				
				initialized = 1;
			}
			else if (inData->shifting == 1 || inData->shifting == 2)
			{
			
#if ACADO_QP_SOLVER == ACADO_QPDUNES
				shiftQpData();
#endif
			
				shiftStates(inData->shifting, 0, 0);
				shiftControls( 0 );
			}
			
			preparationStep();
			
			outData->status = feedbackStep();
			
			outData->kktValue = getKKT();
			outData->objValue = getObjective();
			
#if ACADO_QP_SOLVER == ACADO_QPOASES
 			outData->nIterations = getNWSR();
#endif /* ACADO_QP_SOLVER == ACADO_QPOASES */
			
			break;
		
		case 1:
			/* Initialize */
				
			if (inData->initialization == 1)
			{
				initializeNodesByForwardSimulation();
			}
			
			initialized = 1;
			
			break;
		
		case 2:
			/* Preparation step */
			
			preparationStep();
			
			break;
		
		case 3:
			/* Feedback step */
			
			outData->status = feedbackStep();
			
			outData->kktValue = getKKT();
			outData->objValue = getObjective();
				
#if ACADO_QP_SOLVER == ACADO_QPOASES
			outData->nIterations = getNWSR();
#endif /* ACADO_QP_SOLVER == ACADO_QPOASES */
						
			break;
		
		case 4:
			/* Shifting */
			
#if ACADO_QP_SOLVER == ACADO_QPDUNES
			shiftQpData();
#endif
			
			shiftStates(inData->shifting, 0, 0);
			shiftControls( 0 );
			
			break;
			
		default:
			/* Return default error code */
			outData->status = -1;
	}
	
	/* Copy the data to outside world. */
	memcpy(&(outData->data), &acadoVariables, sizeof( ACADOvariables ));
	
	/* Read the elapsed time. */
	outData->execTime = toc( &tmr );
}

void @MODULE_NAME@_initialize( void )
{
	memset(&acadoWorkspace, 0, sizeof( acadoWorkspace ));	
	initializeSolver();
	initialized = 0;
}

void @MODULE_NAME@_cleanup( void )
{
#if ACADO_QP_SOLVER == ACADO_QPDUNES
	/* Clean-up of the qpDUNES QP solver. */
	cleanupSolver();
#endif /* ACADO_QP_SOLVER == ACADO_QPDUNES */
}
